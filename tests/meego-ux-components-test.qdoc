/*!
  \title MeeGo-Ux-Components-Test
  \page meego-ux-components-test
  
  \section1 QtQuick automatic tests of MeeGo-Ux-Components

  \section2 Installation of QtQuick automatic tests

  \section3 Compilation
  For automated QtQuick tests it is mandatory to install qtest-qml from Qt-Labs on
  your compouter. The sources can be found at gitourious.org and can be compiled this
  way:

  \code
  $ git clone git://gitorious.org/qt-labs/qtest-qml.git
  $ cd qtest-qml
  $ qmake
  $ make install
  \endcode

  Please make sure that qtest-qml is installing correctly into your QML import Path.

  \section2 Package installation

  There is not yet a package available via zypper. For now it must be compiled as described
  above.

  \section1 Compile Meego-Ux-Components Test

  The test executable is not compiled with the meego-ux-components.pro file, but must be compiled and
  installed separately:

  \code
  $ cd tests/auto
  $ qmake
  $ make install # will be installed in tests/auto/build folder
  \endcode

  \section1 Run the automatic QtQuick test

  For running the test the executable must be called. It will search for all testcases automatically.

  \code
  $ ./build/tst_meego-ux-components
  \endcode

  \section1 Testcases

  The list of testcases is not yet supported by qdoc - please refer to the existing qml files.

  \list
    \o \l { Test-Window }
    \o \l { Test-AppPage }
    \o \l { Test-PageStack }
    \o \l { Test-ModalFog }
    \o \l { Test-ModalDialog }
    \o \l { Test-ModalMessageBox }
  \endlist

  \section1 Maintainance

  All testcases are separated into the 3 folders of test: components, kernel and models. The
  auto test will grab every qml file and will install them for the test run.

  Test cases can be maintained and extended within the existing qml files or by creating
  new qml files within the folders names above.

  \section1 Manual tests of Meego-Ux-Components

  The Meego-Ux-Widgetgallery is an example app which contains all MeeGo-Ux-Components. Each component can
  be tweaked and tested with several parameters. This way it is possible to search manually for
  bugs or reproduce bugs in a clean environment.

*/
